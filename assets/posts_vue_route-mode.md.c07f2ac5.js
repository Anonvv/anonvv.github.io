import{_ as s,q as a,r as n,a2 as t}from"./plugin-vue_export-helper.c35c1c54.js";const b='{"title":"Vue router mode\uFF1Ahash vs history","description":"Learn about history API of browser.","frontmatter":{"page":false,"title":"Vue router mode\uFF1Ahash vs history","description":"Learn about history API of browser.","date":"2022-10-07T02:21:21.000Z","sidebar":true,"comment":true,"category":["Vue"],"tags":["VueRouter"]},"headers":[{"level":2,"title":"3.1. pushState(state, title[, url])","slug":"_3-1-pushstate-state-title-url"},{"level":2,"title":"3.2. replaceState(state, title[, url])","slug":"_3-2-replacestate-state-title-url"}],"relativePath":"posts/vue/route-mode.md","lastUpdated":1665147949236}',e={},p=t(`<h1 id="_1-mode" tabindex="-1">1. Mode <a class="header-anchor" href="#_1-mode" aria-hidden="true">#</a></h1><p>There are two route modes in Vue-router: <code>hash</code> and <code>history</code>.</p><p>For aesthetics, we mostly adopt <code>history</code> mode.</p><p>So, there is any distinction between the two modes?</p><h1 id="_2-hash" tabindex="-1">2. hash <a class="header-anchor" href="#_2-hash" aria-hidden="true">#</a></h1><p>Example: <code>http:www.baidu.com/#/test</code></p><p><code>#</code> means <code>hash = &quot;#/xxx&quot;</code></p><p>Feature:<br> The content after <code>#</code> will not be contained in the HTTP request,<br> so the webpage will not be refreshed when the hash value has changed.</p><h1 id="_3-history" tabindex="-1">3. history <a class="header-anchor" href="#_3-history" aria-hidden="true">#</a></h1><p>Example: <code>http:www.baidu.com/test</code></p><p>History mode is supported by H5 history API:</p><ul><li><code>pushState(state, title[, url])</code></li><li><code>replaceState(state, title[, url])</code></li></ul><p>We can operate the history stack of the browser by them.<br> The params are the same for both methods:</p><h2 id="_3-1-pushstate-state-title-url" tabindex="-1">3.1. pushState(state, title[, url]) <a class="header-anchor" href="#_3-1-pushstate-state-title-url" aria-hidden="true">#</a></h2><p>Push a record into history stack of the browser.</p><p>Params:</p><ul><li>state: Object, can be read by <code>history.state</code>;</li><li>title: String | Null, can be ignored;</li><li>url: String, target url.</li></ul><h2 id="_3-2-replacestate-state-title-url" tabindex="-1">3.2. replaceState(state, title[, url]) <a class="header-anchor" href="#_3-2-replacestate-state-title-url" aria-hidden="true">#</a></h2><p>Modify a record of history stack.</p><h1 id="_4-source" tabindex="-1">4. Source <a class="header-anchor" href="#_4-source" aria-hidden="true">#</a></h1><p>from <a href="https://github.com/vuejs/vue-router/blob/dev/src/util/push-state.js#L35" target="_blank" rel="noopener noreferrer">Vue-router</a></p><div class="language-js line-numbers-mode"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">pushState</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">,</span> replace<span class="token operator">?</span><span class="token operator">:</span> boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">saveScrollPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// try...catch the pushState call to get around Safari</span>
  <span class="token comment">// DOM Exception 18 where it limits to 100 pushState calls</span>
  <span class="token keyword">const</span> history <span class="token operator">=</span> window<span class="token punctuation">.</span>history
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>replace<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// preserve existing history state as it could be overriden by the user</span>
      <span class="token keyword">const</span> stateCopy <span class="token operator">=</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> history<span class="token punctuation">.</span>state<span class="token punctuation">)</span>
      stateCopy<span class="token punctuation">.</span>key <span class="token operator">=</span> <span class="token function">getStateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span>stateCopy<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token function">setStateKey</span><span class="token punctuation">(</span><span class="token function">genStateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span>location<span class="token punctuation">[</span>replace <span class="token operator">?</span> <span class="token string">&#39;replace&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;assign&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div>`,22),o=[p];function c(r,l,u,i,h,d){return a(),n("div",null,o)}var m=s(e,[["render",c]]);export{b as __pageData,m as default};
